package todoapp.security.web.servlet;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.method.HandlerMethod;
import org.springframework.web.servlet.HandlerInterceptor;

import todoapp.security.AccessDeniedException;
import todoapp.security.UnauthorizedAccessException;
import todoapp.security.UserSession;
import todoapp.security.UserSessionRepository;
import todoapp.security.support.RolesAllowedSupport;

import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.annotation.security.RolesAllowed;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Role(역할) 기반으로 사용자가 사용 권한을 확인하는 인터셉터 구현체
 *
 * @author springrunner.kr@gmail.com
 */
public class RolesVerifyHandlerInterceptor implements HandlerInterceptor, RolesAllowedSupport {

    private final Logger log = LoggerFactory.getLogger(this.getClass());

    private UserSessionRepository sessionRepository;
    
    public RolesVerifyHandlerInterceptor(UserSessionRepository sessionRepository) {
		this.sessionRepository = sessionRepository;
	}

	@Override
    public final boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        if (handler instanceof HandlerMethod) {
        	RolesAllowed roleAllowed = getRolesAllowed(handler);
        	log.info("roleAllowed: {}", roleAllowed);
        	
//        	RolesAllowed roleAllowed = ((HandlerMethod) handler)
//        			.getMethodAnnotation(RolesAllowed.class);
        	
        	if (Objects.nonNull(roleAllowed)) {
        		UserSession session = sessionRepository.get();
        		if (Objects.isNull(session)) {
        			throw new UnauthorizedAccessException();
        		}
        		
        		Set<String> matchedRoles = Stream
        				.of(roleAllowed.value())
        				.filter(role -> session.hasRole(role))
        				.collect(Collectors.toSet());
        		if (matchedRoles.isEmpty()) {
        			throw new AccessDeniedException();
        		}
        	}
        }
        return true;
    }

}
